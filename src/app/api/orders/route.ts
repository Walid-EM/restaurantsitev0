import { NextRequest, NextResponse } from 'next/server';
import { createOrder, getOrders } from '@/lib/orders';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validation des donn√©es
    if (!body.customerName || !body.customerEmail || !body.items || body.items.length === 0) {
      return NextResponse.json({
        success: false,
        message: 'Donn√©es manquantes: customerName, customerEmail et items sont requis'
      }, { status: 400 });
    }
    
    const order = await createOrder(body);
    
    return NextResponse.json({
      success: true,
      message: 'Commande cr√©√©e avec succ√®s',
      order
    }, { status: 201 });
    
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la commande:', error);
    return NextResponse.json({
      success: false,
      message: 'Erreur lors de la cr√©ation de la commande',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}

export async function GET() {
  try {
    console.log('üîÑ API orders GET appel√©e');
    
    // Solution temporaire : retourner un tableau vide pour √©viter l'erreur 500
    console.log('üìù Retour d\'un tableau vide temporairement');
    
    return NextResponse.json({
      success: true,
      orders: [],
      count: 0,
      message: 'Aucune commande disponible pour le moment'
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des commandes:', error);
    
    // En cas d'erreur, retourner quand m√™me un tableau vide
    return NextResponse.json({
      success: true,
      orders: [],
      count: 0,
      message: 'Erreur lors de la r√©cup√©ration, tableau vide retourn√©'
    });
  }
}
