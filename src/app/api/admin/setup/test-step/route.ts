import { NextResponse } from 'next/server';
import { connectDB } from '@/lib/mongodb';
import Category from '@/models/Category';
import Product from '@/models/Product';

// Route de test √©tape par √©tape pour diagnostiquer l'initialisation
export async function POST() {
  try {
    console.log('üß™ Test √©tape par √©tape de l\'initialisation...');
    
    // √âtape 1: V√©rifier l'environnement
    console.log('üìã √âtape 1: V√©rification de l\'environnement...');
    console.log('- NODE_ENV:', process.env.NODE_ENV);
    console.log('- MONGODB_URI:', !!process.env.MONGODB_URI);
    
    // √âtape 2: Connexion MongoDB
    console.log('üìã √âtape 2: Connexion MongoDB...');
    await connectDB();
    console.log('‚úÖ MongoDB connect√©');
    
    // √âtape 3: V√©rifier les mod√®les
    console.log('üìã √âtape 3: V√©rification des mod√®les...');
    console.log('- Mod√®le Category:', !!Category);
    console.log('- Mod√®le Product:', !!Product);
    
    // √âtape 4: V√©rifier la base de donn√©es existante
    console.log('üìã √âtape 4: V√©rification de la base de donn√©es...');
    const categoriesCount = await Category.countDocuments();
    const productsCount = await Product.countDocuments();
    
    console.log('- Cat√©gories existantes:', categoriesCount);
    console.log('- Produits existants:', productsCount);
    
    // √âtape 5: Test de cr√©ation d'une seule cat√©gorie
    console.log('üìã √âtape 5: Test cr√©ation d\'une cat√©gorie...');
    const testCategory = new Category({
      name: 'Test Cat√©gorie',
      description: 'Cat√©gorie de test',
      image: '/test.png',
      isActive: true,
      allowedOptions: ['supplements', 'sauces'],
      order: 999
    });
    
    const savedCategory = await testCategory.save();
    console.log('‚úÖ Cat√©gorie de test cr√©√©e:', savedCategory._id);
    
    // √âtape 6: Test de cr√©ation d'un seul produit
    console.log('üìã √âtape 6: Test cr√©ation d\'un produit...');
    const testProduct = new Product({
      name: 'Test Produit',
      description: 'Produit de test',
      price: 9.99,
      category: 'test',
      image: '/test.png',
      isAvailable: true
    });
    
    const savedProduct = await testProduct.save();
    console.log('‚úÖ Produit de test cr√©√©:', savedProduct._id);
    
    // √âtape 7: Nettoyage des tests
    console.log('üìã √âtape 7: Nettoyage des tests...');
    await Category.deleteOne({ _id: savedCategory._id });
    await Product.deleteOne({ _id: savedProduct._id });
    console.log('‚úÖ Tests nettoy√©s');
    
    return NextResponse.json({
      success: true,
      message: 'Test √©tape par √©tape r√©ussi',
      steps: {
        environment: '‚úÖ',
        connection: '‚úÖ',
        models: '‚úÖ',
        database: '‚úÖ',
        categoryCreation: '‚úÖ',
        productCreation: '‚úÖ',
        cleanup: '‚úÖ'
      },
      data: {
        categoriesCount,
        productsCount,
        testCategory: {
          name: testCategory.name,
          description: testCategory.description
        },
        testProduct: {
          name: testProduct.name,
          price: testProduct.price
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test √©tape par √©tape:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Erreur lors du test √©tape par √©tape',
      details: error instanceof Error ? error.message : 'Erreur inconnue',
      errorType: error instanceof Error ? error.constructor.name : 'Unknown',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}
